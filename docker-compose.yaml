volumes:
  grafana:

services:
  otelcol:
    image: otel/opentelemetry-collector-contrib
    restart: unless-stopped
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
      - "4317:4317"
    volumes:
      - "./docker/otel/collector.config.yaml:/etc/collector.config.yaml"
    command: ["--config=/etc/collector.config.yaml"]

  # The Grafana dashboarding server.
  grafana:
    image: grafana/grafana:11.0.0
    volumes:
#      - "./grafana/definitions:/var/lib/grafana/dashboards"
      - "./docker/grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch correlations traceQLStreaming metricsSummary traceqlEditor traceToMetrics traceToProfiles datatrails
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true

  # The Tempo service stores traces send to it by Grafana opentelemetry-collector, and takes
  # queries from Grafana to visualise those traces.
  tempo:
    image: grafana/tempo:2.4.1
    ports:
      - "3200:3200"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./docker/tempo/config.yaml:/etc/tempo.yaml"

  mimir:
    image: grafana/mimir:2.12.0
    command: ["-ingester.native-histograms-ingestion-enabled=true", "-config.file=/etc/mimir.yaml"]
    ports:
      - "9009:9009"
    volumes:
      - "./docker/mimir/config.yaml:/etc/mimir.yaml"

  go-otel-grpc-example-server:
    build:
      context: .
      dockerfile: .Dockerfile
      args:
        service_port: 30031
        main_file: example/otelgrpc/server/main.go
    environment:
      ADDRESS: "0.0.0.0:30031"
      OTEL_SERVICE_NAME: "go-otel-grpc-example-server"
      OTEL_RESOURCE_ATTRIBUTES: "container=docker,host=localhost"
      OTEL_EXPORTER_OTLP_TYPE: "grpc"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otelcol:4317"
      OTEL_EXPORTER_OTLP_INSECURE: true
    ports:
      - "30031:30031"
    depends_on:
      otelcol:
        condition: service_started

  go-otel-grpc-example-client:
    build:
      context: .
      dockerfile: .Dockerfile
      args:
        service_port: 30032
        main_file: example/otelgrpc/client/main.go
    environment:
      SERVER_ADDRESS: "go-otel-grpc-example-server:30031"
      OTEL_SERVICE_NAME: "go-otel-grpc-example-client"
      OTEL_RESOURCE_ATTRIBUTES: "container=docker,host=localhost"
      OTEL_EXPORTER_OTLP_TYPE: "grpc"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otelcol:4317"
    depends_on:
      tempo:
        condition: service_started
      mimir:
        condition: service_started
      grafana:
        condition: service_started
      otelcol:
        condition: service_started
      go-otel-grpc-example-server:
        condition: service_started